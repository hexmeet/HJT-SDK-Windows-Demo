<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:EasyVideoWin.Resources.Styles"
                    xmlns:CustomControls="clr-namespace:EasyVideoWin.CustomControls">
    
    <BooleanToVisibilityConverter x:Key="BoolToVis"/>

    <!--close button Style-->
    <Style x:Key="CloseKey" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <StackPanel Orientation="Horizontal" >
                        <Image Name="ImgBtnBgClose" Cursor="Hand" Source="pack://application:,,,/Resources/Icons/TitleBar/icon_close_default.png" />
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Source" Value="pack://application:,,,/Resources/Icons/TitleBar/icon_close_hover.png" TargetName="ImgBtnBgClose"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Source" Value="pack://application:,,,/Resources/Icons/TitleBar/icon_close_click.png" TargetName="ImgBtnBgClose"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Minimize button Style-->
    <Style x:Key="MinKey" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <StackPanel Orientation="Horizontal" >
                        <Image Name="ImgBtnBgClose" Cursor="Hand" Source="pack://application:,,,/Resources/Icons/TitleBar/icon_minimize_default.png" />
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Source" Value="pack://application:,,,/Resources/Icons/TitleBar/icon_minimize_hover.png" TargetName="ImgBtnBgClose"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Source" Value="pack://application:,,,/Resources/Icons/TitleBar/icon_minimize_click.png" TargetName="ImgBtnBgClose"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="FocusStyle">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Stroke="#0f99c5" StrokeThickness="1"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="NewCheckBox" TargetType="{x:Type CheckBox}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusStyle}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <BulletDecorator FlowDirection="LeftToRight" VerticalAlignment="Center">
                        <BulletDecorator.Bullet>
                            <Border x:Name="bd"  
                                BorderThickness="1"  
                                BorderBrush="#0f99c5"  
                                MinHeight="15"  
                                MinWidth="15"  
                                VerticalAlignment="Center">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0"  
                                                     EndPoint="1,1">
                                        <GradientStop Color="LightGray" Offset="0.2"/>
                                        <GradientStop Color="White" Offset="1"/>
                                    </LinearGradientBrush>
                                </Border.Background>
                                <Path x:Name="cp" Width="12" Height="12"  
                                  Stroke="Black"  
                                  StrokeThickness="3"/>
                            </Border>
                        </BulletDecorator.Bullet>
                        <ContentPresenter Margin="2,0"/>
                    </BulletDecorator>
                    <!-- 
                    控件触发器 
                -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <!-- 画上一个勾 -->
                            <Setter TargetName="cp" Property="Data"  
                                Value="M 0,6 L 6,12 12,0"/>
                            <Setter Property="Foreground" Value="#fff"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="bd" Property="Background">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                                        <GradientStop Color="#f0f0f0" Offset="0.12"/>
                                        <GradientStop Color="White" Offset="0.92"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--long red button Style-->
    <Style x:Key="BtnRedLoneKey" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Image x:Name="ImgBtnBgRed" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                            <Image.Source>
                                <BitmapImage UriSource="pack://application:,,,/Resources/Icons/Button/btn-red-long-normal.png"/>
                            </Image.Source>
                        </Image>
                        <TextBlock Text ="{TemplateBinding Content}" Foreground="White" FontSize="14" HorizontalAlignment="Center" Margin="-2,0,0,0" VerticalAlignment="Center"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Source" Value="pack://application:,,,/Resources/Icons/Button/btn-red-long-hover.png" TargetName="ImgBtnBgRed"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Source" Value="pack://application:,,,/Resources/Icons/Button/btn-red-long-click.png" TargetName="ImgBtnBgRed"/>
                        </Trigger>


                    </ControlTemplate.Triggers>
                </ControlTemplate>

            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DialNumberButton" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="80"/>
        <Setter Property="Height" Value="80"/>
        <Setter Property="Background" Value="#FFFFFFFF"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Ellipse x:Name="ButtonEllipse" Width="Auto" Height="Auto" StrokeThickness="0" Fill="White" Stroke="Gray"></Ellipse>
                        <!--<TextBlock x:Name="ButtonText" Text="{TemplateBinding Content}" FontSize="36" Foreground="#FFelelel" HorizontalAlignment="Center" VerticalAlignment="Center"/>-->
                        <TextBlock x:Name="ButtonText"  Text="{TemplateBinding Content}" FontSize="36" Foreground="#FF1f1f1f" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ButtonEllipse" Property="Fill" Value="#FFf1f1f1"/>
                        </Trigger>
                        <Trigger Property="IsPressed"  Value="True">
                            <Setter TargetName="ButtonEllipse" Property="Fill" Value="#FFf1f1f1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>



        <!--<Setter Property="Width" Value="80"/>
            <Setter Property="Height" Value="80"/>
            <Setter Property="Background" Value="#FFFFFFFF"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" BorderBrush="#FFF1F1F1" BorderThickness="1,0,0,1">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="Red"/>
                </Trigger>
                <Trigger Property="IsPressed"  Value="True">
                    <Setter Property="Background" Value="#FF0000FF"/>
                </Trigger>
            </Style.Triggers>-->

    </Style>
    <Style x:Key="PasswordBoxStyle1" TargetType="{x:Type PasswordBox}">
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Border x:Name="Bd" SnapsToDevicePixels="true" BorderThickness="{TemplateBinding BorderThickness}" Background="#ffffff" Opacity="0.5" BorderBrush="{TemplateBinding BorderBrush}">
                        <Grid Margin="{TemplateBinding Padding}">
                            <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            <TextBlock x:Name="water" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="#FF1f1f1f" FontSize="14"
                                        Text="{DynamicResource INPUT_PASSWORD}" Visibility="Hidden"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsFocused" Value="false"/>
                                <Condition Property="ExtentWidth" Value="0" SourceName="PART_ContentHost"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" Value="Visible" TargetName="water"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LoginTextBoxStyle" TargetType="{x:Type TextBox}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="BorderBrush" Value="#FFABADB3"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="True"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="#ffffff" Opacity="0.5" SnapsToDevicePixels="True">
                        <Grid>
                            <ScrollViewer x:Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                            <TextBlock x:Name="WARKTEXT" Text="{TemplateBinding Tag}" Foreground="#1f1f1f" Visibility="Collapsed" FontSize="14" VerticalAlignment="Center"  HorizontalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="border" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="#FF7EB4EA"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="#FF569DE5"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Text" Value=""/>
                                <Condition Property="IsFocused" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="WARKTEXT" Value="Visible" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="True"/>
                    <Condition Property="IsSelectionActive" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="Gray"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="WarkTextBoxStyle" TargetType="{x:Type TextBox}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="BorderBrush" Value="#FFABADB3"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="True"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <Grid>
                            <ScrollViewer x:Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                            <TextBlock x:Name="WARKTEXT" Text="{TemplateBinding Tag}" Foreground="#FFE1E1E1" Visibility="Collapsed" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="#FF7EB4EA"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="#FF569DE5"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Text" Value=""/>
                                <!--<Condition Property="IsFocused" Value="False"/>-->
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="WARKTEXT" Value="Visible"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="True"/>
                    <Condition Property="IsSelectionActive" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    
    <!-- ComboBox start -->
    <LinearGradientBrush x:Key="NormalBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <!--<GradientStop Color="#FFDC3939" Offset="0.0"/>
                    <GradientStop Color="#FFE80E0E" Offset="1.0"/>-->
                <GradientStop Color="White" Offset="0.0"/>
                <GradientStop Color="White" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    
    <SolidColorBrush x:Key="WindowBackgroundBrush" Color="White" />
    
    <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="ToggleButton">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="30" />
            </Grid.ColumnDefinitions>
            <Border x:Name="Border" Grid.ColumnSpan="2" CornerRadius="2" Background="{StaticResource NormalBrush}" BorderThickness="1" BorderBrush="#919191" />
            <Border Grid.Column="0" CornerRadius="2,0,0,2" Margin="1" Background="{StaticResource WindowBackgroundBrush}" BorderThickness="0,0,1,0"/>
            <Border x:Name="Arrow" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center">
                <StackPanel Orientation="Vertical" >
                    <Image x:Name="imgDropDown" Width="13" Height="13" Source="pack://application:,,,/Resources/Icons/History/btn_drop-down_normal.png" />
                </StackPanel>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="imgDropDown" Property="Source" Value="pack://application:,,,/Resources/Icons/History/btn_drop-down_click.png"></Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="TextBox">
        <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}" />
    </ControlTemplate>

    <Style x:Key="ComboBoxKey"  TargetType="{x:Type ComboBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <ToggleButton Name="ToggleButton" Template="{StaticResource ComboBoxToggleButton}" Grid.Column="2" Focusable="false"
                                IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                                ClickMode="Press">
                        </ToggleButton>
                        <ContentPresenter Name="ContentSite" IsHitTestVisible="False" Margin="3,3,23,3" VerticalAlignment="Center" HorizontalAlignment="Left"
                                              Content="{TemplateBinding ComboBox.SelectionBoxItem}" ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"/>
                        <TextBox x:Name="PART_EditableTextBox"
                                 Style="{x:Null}" 
                                 Template="{StaticResource ComboBoxTextBox}" 
                                 HorizontalAlignment="Left" 
                                 VerticalAlignment="Center" 
                                 Margin="3,3,23,3"
                                 Focusable="True" 
                                 Background="Transparent"
                                 Visibility="Hidden"
                                 IsReadOnly="{TemplateBinding IsReadOnly}"/>
                        <Popup 
                                Name="Popup"
                                Placement="Bottom"
                                IsOpen="{TemplateBinding IsDropDownOpen}"
                                AllowsTransparency="True" 
                                Focusable="False"
                                PopupAnimation="Slide">
                            <Grid 
                                      Name="DropDown"
                                      SnapsToDevicePixels="True"                
                                      MinWidth="{TemplateBinding ActualWidth}"
                                      MaxHeight="{TemplateBinding MaxDropDownHeight}" Width="300">
                                <Border 
                                        x:Name="DropDownBorder"
                                        Background="{StaticResource WindowBackgroundBrush}" BorderBrush="#abadb3"
                                        BorderThickness="1"/>
                                <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True" HorizontalScrollBarVisibility="Disabled">
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="HistoryListKey"  TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Border x:Name="border">
                        <Grid x:Name="grid">
                            <ToggleButton Template="{StaticResource ComboBoxToggleButton}" x:Name="ToggleButton"
                                              Focusable="false"
                                              IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                              ClickMode="Press" />
                            <ContentPresenter HorizontalAlignment="Left" x:Name="ContentSite" Margin="3,3,23,3"
                                                  VerticalAlignment="Center" Content="{TemplateBinding SelectionBoxItem}"
                                                  ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                                  ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                                  IsHitTestVisible="False" />
                            <TextBox Visibility="Hidden" Margin="1,0,22,0" BorderThickness="0" 
                                         x:Name="PART_EditableTextBox" Style="{x:Null}"
                                         VerticalAlignment="Center" Focusable="True"
                                         HorizontalContentAlignment="Center"
                                         IsReadOnly="{TemplateBinding IsReadOnly}"
                                     Foreground="#313131"
                                         HorizontalAlignment="Stretch" />
                            <TextBlock x:Name="WARKTEXT" Text="{TemplateBinding Tag}" Foreground="#c1c1c1" Visibility="Collapsed" FontSize="14" VerticalAlignment="Center"  HorizontalAlignment="Center"/>
                            <!--文本输入框，当IsEditable为true 才显示-->
                            <Popup IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" x:Name="Popup" Focusable="False" AllowsTransparency="True" PopupAnimation="Slide">
                                <Grid MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{TemplateBinding ActualWidth}" x:Name="DropDown" SnapsToDevicePixels="True">
                                    <Border x:Name="DropDownBorder" Background="White" BorderThickness="1" BorderBrush="Black" CornerRadius="2" />
                                    <ScrollViewer Margin="1, 5" SnapsToDevicePixels="True" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" CanContentScroll="True" Foreground="{StaticResource {x:Static SystemColors.ActiveCaptionTextBrushKey}}">
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                    </ScrollViewer>
                                </Grid>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="MinHeight" Value="95" TargetName="DropDownBorder" />
                        </Trigger>

                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </Trigger>
                        <Trigger Property="AllowsTransparency" SourceName="Popup" Value="true">
                            <Setter Property="Margin" Value="0,2,0,0" TargetName="DropDownBorder" />
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false" />
                            <Setter Property="Visibility" Value="Visible" TargetName="PART_EditableTextBox" />
                            <Setter Property="Visibility" Value="Hidden" TargetName="ContentSite" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Text" Value=""/>
                                <Condition Property="IsFocused" Value="False" SourceName="PART_EditableTextBox"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="WARKTEXT" Value="Visible" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <!--ComBoxItem-->
                <Style TargetType="ComboBoxItem">
                    <Setter Property="MinHeight" Value="22"></Setter>
                    <Setter Property="MinWidth" Value="60"></Setter>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="ComboBoxItem">
                                <Border Name="Back" Background="Transparent"  BorderThickness="0,0,0,0" BorderBrush="#81D779" >
                                    <ContentPresenter ContentSource="{Binding Source}" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="10,0,0,0" ></ContentPresenter>
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter TargetName="Back" Property="Background" Value="LightGray"></Setter>
                                    </Trigger>
                                    <!--下拉框背景色-->
                                    <Trigger Property="IsHighlighted" Value="True">
                                        <Setter TargetName="Back" Property="Background" Value="#4381ff"></Setter>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ComboBox end -->
    
    <BooleanToVisibilityConverter x:Key="BoolToVisibilityConverter"/>

    <ControlTemplate x:Key="EllipseTemplate" TargetType="{x:Type CustomControls:PulseButton}">
        <Grid x:Name="PART_body" Background="{TemplateBinding Background}">
            <!-- Pulse Container -->
            <Grid x:Name="PART_pulse_container"/>
            <!-- Button -->
            <Ellipse x:Name="PART_button" Stroke="#60000000" StrokeThickness="2" Fill="{TemplateBinding ButtonBrush}"/>
            <!-- Focus visual -->
            <Ellipse x:Name="PART_focus_visual" IsHitTestVisible="False"
                       Stroke="{TemplateBinding ButtonHighlightBrush}" 
                       StrokeThickness="2" 
                       StrokeDashArray="1 2"
                       Fill="Transparent" Margin="2" 
                       Visibility="{TemplateBinding IsFocused, Converter={StaticResource BoolToVisibilityConverter}}" />
            <!-- Reflex -->
            <Ellipse x:Name="PART_reflex" IsHitTestVisible="False" Visibility="{TemplateBinding IsReflective, Converter={StaticResource BoolToVisibilityConverter}}">
                <Ellipse.Fill>
                    <RadialGradientBrush RadiusX="{TemplateBinding RadiusX}" RadiusY="{TemplateBinding RadiusY}" Center="0.5,-1.5" GradientOrigin="0.5,-1.5">
                        <RadialGradientBrush.GradientStops>
                            <GradientStop Color="White" Offset="0"/>
                            <GradientStop Color="#60FFFFFF" Offset="0.4"/>
                            <GradientStop Color="#30FFFFFF" Offset="0.995"/>
                            <GradientStop Color="#00FFFFFF" Offset="1"/>
                        </RadialGradientBrush.GradientStops>
                    </RadialGradientBrush>
                </Ellipse.Fill>
            </Ellipse>
            <!-- Content presenter -->
            <ContentPresenter IsHitTestVisible="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
        </Grid>
        <!-- ControlTemplate Triggers -->
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True" SourceName="PART_button">
                <Setter Property="Fill" TargetName="PART_button" Value="{Binding Path=ButtonHighlightBrush, 
                    RelativeSource={RelativeSource AncestorType={x:Type CustomControls:PulseButton}}}" />
                <Setter Property="Stroke" TargetName="PART_focus_visual" Value="Black" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Fill" TargetName="PART_button" Value="{Binding Path=ButtonPressedBrush, 
                    RelativeSource={RelativeSource AncestorType={x:Type CustomControls:PulseButton}}}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Fill" TargetName="PART_button" Value="{Binding Path=ButtonDisabledBrush, 
                    RelativeSource={RelativeSource AncestorType={x:Type CustomControls:PulseButton}}}" />
                <Setter Property="Foreground" Value="DimGray" />
                <Setter Property="IsPulsing" Value="False" />
                <Setter Property="Visibility" TargetName="PART_reflex" Value="Hidden" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="RectangleTemplate" TargetType="{x:Type CustomControls:PulseButton}">
        <Grid x:Name="PART_body" Background="{TemplateBinding Background}">
            <!-- Pulse Container -->
            <Grid x:Name="PART_pulse_container" IsHitTestVisible="False" />
            <!-- Button -->
            <Rectangle x:Name="PART_button" 
                       RadiusX="{TemplateBinding RadiusX}" RadiusY="{TemplateBinding RadiusY}" 
                       Stroke="#60000000" 
                       StrokeThickness="2"
                       Fill="{TemplateBinding ButtonBrush}" />
            <!-- Focus visual -->
            <Rectangle x:Name="PART_focus_visual" RadiusX="{TemplateBinding RadiusX}" RadiusY="{TemplateBinding RadiusY}" 
                       Stroke="{TemplateBinding ButtonHighlightBrush}" 
                       StrokeThickness="2" IsHitTestVisible="False"
                       StrokeDashArray="1 2"
                       Fill="Transparent" Margin="2" 
                       Visibility="{TemplateBinding IsFocused, Converter={StaticResource BoolToVisibilityConverter}}" />
            <!-- Reflex -->
            <Rectangle x:Name="PART_reflex" RadiusX="{TemplateBinding RadiusX}" RadiusY="{TemplateBinding RadiusY}" IsHitTestVisible="False"
                       Visibility="{TemplateBinding IsReflective, Converter={StaticResource BoolToVisibilityConverter}}">
                <Rectangle.Fill>
                    <RadialGradientBrush RadiusX="2.6" RadiusY="2.05" Center="0.5,-1.5" GradientOrigin="0.5,-1.5">
                        <RadialGradientBrush.GradientStops>
                            <GradientStop Color="White" Offset="0"/>
                            <GradientStop Color="#60FFFFFF" Offset="0.4"/>
                            <GradientStop Color="#30FFFFFF" Offset="0.995"/>
                            <GradientStop Color="#00FFFFFF" Offset="1"/>
                        </RadialGradientBrush.GradientStops>
                    </RadialGradientBrush>
                </Rectangle.Fill>
            </Rectangle>
            <!-- Content presenter -->
            <ContentPresenter IsHitTestVisible="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
        </Grid>
        <!-- ControlTemplate Triggers -->
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True" SourceName="PART_button">
                <Setter Property="Fill" TargetName="PART_button" Value="{Binding Path=ButtonHighlightBrush, 
                    RelativeSource={RelativeSource AncestorType={x:Type CustomControls:PulseButton}}}" />
                <Setter Property="Stroke" TargetName="PART_focus_visual" Value="Black" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Fill" TargetName="PART_button" Value="{Binding Path=ButtonPressedBrush, 
                    RelativeSource={RelativeSource AncestorType={x:Type CustomControls:PulseButton}}}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Fill" TargetName="PART_button" Value="{Binding Path=ButtonDisabledBrush, 
                    RelativeSource={RelativeSource AncestorType={x:Type CustomControls:PulseButton}}}" />
                <Setter Property="Foreground" Value="DimGray" />
                <Setter Property="IsPulsing" Value="False" />
                <Setter Property="Visibility" TargetName="PART_reflex" Value="Hidden" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- PulseButton Style -->
    <Style TargetType="{x:Type CustomControls:PulseButton}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="ClipToBounds" Value="False"/>
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="IsReflective" Value="True"></Setter>
        <Setter Property="Template" Value="{StaticResource RectangleTemplate}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="RadiusX" Value="2.0" />
        <Setter Property="RadiusY" Value="2.0" />
        <Style.Triggers>
            <Trigger Property="IsEllipsis" Value="True">
                <Setter Property="Template" Value="{StaticResource EllipseTemplate}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!-- OperationBar Button Style -->
    <Style x:Key="OperationButtonStyle" TargetType="{x:Type CustomControls:WpfImageButton}">
        <Setter Property="Width" Value="62"/>
        <Setter Property="Height" Value="62"/>
        <Setter Property="ImageWidth" Value="62"/>
        <Setter Property="ImageHeight" Value="62"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Margin" Value="14, 0, 0, 0"/>
    </Style>

    <Style x:Key="SvcLoginInfoTextBoxStyle" TargetType="{x:Type TextBox}">
        <Setter Property="BorderBrush" Value="#FFABADB3"/>
        <Setter Property="Foreground" Value="#FF313131"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="True"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="#ffffff" SnapsToDevicePixels="True" CornerRadius="2">
                        <Grid>
                            <ScrollViewer x:Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                            <TextBlock x:Name="WARKTEXT" Text="{TemplateBinding Tag}" Foreground="#c1c1c1" Visibility="Collapsed" FontSize="14" VerticalAlignment="Center"  HorizontalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="border" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="#FF7EB4EA"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="#FF569DE5"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Text" Value=""/>
                                <Condition Property="IsFocused" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="WARKTEXT" Value="Visible" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="True"/>
                    <Condition Property="IsSelectionActive" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="Gray"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="SvcLoginInfoPasswordBoxStyle" TargetType="{x:Type PasswordBox}">
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="Foreground" Value="#313131"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Border x:Name="border" SnapsToDevicePixels="true" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="2">
                        <Grid Margin="{TemplateBinding Padding}">
                            <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            <TextBlock x:Name="water" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="#c1c1c1" FontSize="14"
                                        Text="{DynamicResource PASSWORD}" Visibility="Hidden"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="#FF7EB4EA"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="#FF569DE5"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsFocused" Value="false"/>
                                <Condition Property="ExtentWidth" Value="0" SourceName="PART_ContentHost"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" Value="Visible" TargetName="water"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MyInfoTitle" TargetType="{x:Type TextBlock}">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="15, 0, 0, 0"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Foreground" Value="#919191"/>
    </Style>
    <Style x:Key="MyInfoContent" TargetType="{x:Type TextBlock}">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="10, 0, 0, 0"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Foreground" Value="#313131"/>
    </Style>

    <Style x:Key="ChangePasswordTitle" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Foreground" Value="#313131"/>
    </Style>

    <Style x:Key="CancelButton" TargetType="{x:Type CustomControls:TextButton}">
        <Setter Property="ButtonContent" Value="{DynamicResource CANCEL}"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="NormalForegroundColor" Value="#313131"/>
        <Setter Property="HoverForegroundColor" Value="#4381ff"/>
        <Setter Property="ClickForegroundColor" Value="#4381ff"/>
        <Setter Property="NormalBackgroundColor" Value="#f1f1f1"/>
        <Setter Property="HoverBackgroundColor" Value="#e0ecff"/>
        <Setter Property="ClickBackgroundColor" Value="#e0ecff"/>
    </Style>

    <Style x:Key="ConfirmButton" TargetType="{x:Type CustomControls:TextButton}">
        <Setter Property="ButtonContent" Value="{DynamicResource CONFIRM}"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="NormalForegroundColor" Value="#FFFFFF"/>
        <Setter Property="NormalBackgroundColor" Value="#4381ff"/>
        <Setter Property="HoverBackgroundColor" Value="#6698ff"/>
        <Setter Property="ClickBackgroundColor" Value="#6698ff"/>
    </Style>


    <!-- ContextMenu surface style -->
    <Style x:Key="TextMenu" TargetType="{x:Type ContextMenu}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Grid.IsSharedSizeScope" Value="True"/>
        <Setter Property ="Focusable" Value="False"/>
        <Setter Property="HasDropShadow" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border 
                          Name="Border"
                          Background="#FFFFFF"
                          BorderBrush="#E1E1E1"
                          BorderThickness="1" >
                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" Value="true">
                            <Setter TargetName="Border" Property="Padding" Value="0,3,0,3"/>
                            <Setter TargetName="Border" Property="CornerRadius" Value="3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- separator style between items -->
    <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}">
        <Setter Property="Height" Value="1"/>
        <Setter Property="Margin" Value="0,4,0,4"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border BorderBrush="#888888" BorderThickness="1"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- TopLevelHeader -->
    <ControlTemplate x:Key="{x:Static MenuItem.TopLevelHeaderTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border Name="Border" >
            <Grid>
                <ContentPresenter 
                    Margin="6,3,6,3" 
                    ContentSource="Header"
                    RecognizesAccessKey="True" />
                <Popup 
                Name="Popup"
                Placement="Bottom"
                IsOpen="{TemplateBinding IsSubmenuOpen}"
                AllowsTransparency="True" 
                Focusable="False"
                PopupAnimation="Slide">
                    <Border 
                      Name="SubmenuBorder"
                      SnapsToDevicePixels="True"
                      Background="#FFFFFF"
                      BorderBrush="#888888"
                      BorderThickness="1" >
                        <StackPanel  
                    IsItemsHost="True" 
                    KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter TargetName="Popup" Property="PopupAnimation" Value="None"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="Green"/>
                <Setter TargetName="Border" Property="BorderBrush" Value="Transparent"/>
            </Trigger>
            <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="True">
                <Setter TargetName="SubmenuBorder" Property="CornerRadius" Value="0,0,4,4"/>
                <Setter TargetName="SubmenuBorder" Property="Padding" Value="0,0,0,3"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="#888888"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- TopLevelItem -->
    <ControlTemplate x:Key="{x:Static MenuItem.TopLevelItemTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border Name="Border" >
            <Grid>
                <ContentPresenter 
                Margin="20,3,6,10" 
                ContentSource="Header"
                RecognizesAccessKey="True" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="Blue"/>
                <Setter TargetName="Border" Property="BorderBrush" Value="Transparent"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="#888888"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- SubmenuItem surface style-->
    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border Name="Border" >
            <Grid >
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="5" SharedSizeGroup="Icon"/>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="0" SharedSizeGroup="Shortcut"/>
                    <ColumnDefinition Width="0"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter 
                    Name="Icon"
                    Margin="0"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Stretch"
                    ContentSource="Icon"/>
                <Border 
                    Name="Check"  
                    Width="13" Height="13" 
                    Visibility="Hidden"
                    Margin="6,0,6,0" 
                    Background="#C0C0C0"
                    BorderThickness="1"
                    BorderBrush="#404040">
                    <Path 
                      Name="CheckMark"
                      Width="7" Height="7" 
                      Visibility="Visible" 
                      SnapsToDevicePixels="False" 
                      Stroke="#404040"
                      StrokeThickness="1"
                      Data="M 0 0 L 7 7 M 0 7 L 7 0" />
                </Border>
                <ContentPresenter 
                    Name="HeaderHost"
                    Grid.Column="1"
                    ContentSource="Header"
                    VerticalAlignment="Center"
                    RecognizesAccessKey="True"/>
                <TextBlock x:Name="InputGestureText"
                    Grid.Column="2"
                    Text="{TemplateBinding InputGestureText}"
                    Margin="5,0,0,2"
                    FontSize="14"
                    Foreground="Red"
                    DockPanel.Dock="Right"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsCheckable" Value="true">
                <Setter TargetName="Check" Property="Visibility" Value="Hidden"/>
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden"/>
            </Trigger>
            <!--选中菜单项时的高亮颜色的trigger设置-->
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="#4381ff"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="Yellow"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- SubmenuHeader -->

    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuHeaderTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border Name="Border" >
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Icon"/>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut"/>
                    <ColumnDefinition Width="13"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter 
                Name="Icon"
                Margin="6,0,6,0"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch"
                ContentSource="Icon"/>
                <ContentPresenter 
                Name="HeaderHost"
                Grid.Column="1"
                ContentSource="Header"
                RecognizesAccessKey="True"/>
                <TextBlock x:Name="InputGestureText"
                Grid.Column="2"
                Text="{TemplateBinding InputGestureText}"
                Margin="5,2,2,2"
                DockPanel.Dock="Right"/>
                <Path 
                Grid.Column="3"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Data="M 0 0 L 0 7 L 4 3.5 Z" 
                Fill="#404040" />
                <Popup 
                Name="Popup"
                Placement="Left"
                HorizontalOffset="-4" 
                IsOpen="{TemplateBinding IsSubmenuOpen}"
                AllowsTransparency="True" 
                Focusable="False"
                PopupAnimation="Slide">
                    <Border 
                  Name="SubmenuBorder"
                  SnapsToDevicePixels="True"
                  Background="#FFFFFF"
                  BorderBrush="#888888"
                  BorderThickness="1" >
                        <StackPanel  
                      IsItemsHost="True" 
                      KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="#EEEEEE"/>
            </Trigger>
            <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="True">
                <Setter TargetName="SubmenuBorder" Property="CornerRadius" Value="4"/>
                <Setter TargetName="SubmenuBorder" Property="Padding" Value="0,3,0,3"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="#888888"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- MenuItem Style -->

    <Style x:Key="TextMenuItem" TargetType="{x:Type MenuItem}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Style.Triggers>
            <!--<Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelHeaderTemplateKey}}"/>
                <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelItemTemplateKey}}"/>
            </Trigger>-->
            <!--<Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuHeaderTemplateKey}}"/>
            </Trigger>-->
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuItemTemplateKey}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>